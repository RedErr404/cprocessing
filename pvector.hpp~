#include "cprocessing.hpp"

#ifndef CPROCESSING_PVECTOR_
#define CPROCESSING_PVECTOR_


using namespace cprocessing;

namespace cprocessing {   
    /// Represents a vector (or, sometimes, a point) in 3D
	class PVector {
	public:
		double x, y, z; ///< The coordinates
		/// Constructor
		PVector (double thex = 0, double they = 0, double thez = 0);

		/// Assignment from coordinates
		void set (double thex = 0, double they = 0, double thez = 0);

		/// Assignment from another PVector
		void set (const PVector& other);

		/// Assignment from an array of doubles
		void set (const double other[]);

		/// Copy of the vector
		PVector get();

		/// Add
		PVector operator+(const PVector& other);
		PVector add (const PVector& other);
		static PVector add (const PVector& a, const PVector& b);

		/// Subtract
		PVector operator-(const PVector& other);
		PVector sub (const PVector& other);
		static PVector sub (const PVector& a, const PVector& b);

		/// Multiply by scalar
		PVector operator*(double s);
		PVector mult(double s);
		static PVector mult(const PVector& v, double s);

		/// Divide by scalar
		PVector operator/(double s);
		PVector div(double s);
		static PVector div(const PVector& v, double s);

		/// Dot product
		double dot (const PVector& other);
		static double dot (const PVector& a, const PVector& b);

		/// Cross product
		static PVector cross (const PVector& v1, const PVector& v2);

		PVector cross (const PVector& other);

		/// Magnitude
		double mag ();

		/// Distance between two points
		double dist (const PVector& other);
		static double dist (const PVector& a, const PVector& b);

		/// Normalize (make unit length)
		void normalize();

		/// Angle between two vectors
		static double angleBetween (const PVector& a, const PVector& b);

		/// Limit the magnitude of this vector to the value used for the max parameter
		void limit (double max);

		/// Returns vector coordinates as an array
		double* array();
	};
}

#endif